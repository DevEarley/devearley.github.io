{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/resources/index.ts","src/map-editor-canvas.ts","src/map-editor-tools.ts","src/map-editor-triggers.ts","src/map-editor-types.ts"],"names":[],"mappings":";;;IAAA;QAAA;YACE,YAAO,GAAG,cAAc,CAAC;QAC3B,CAAC;QAAD,UAAC;IAAD,CAFA,AAEC,IAAA;IAFY,kBAAG;;;;;;;;ICAhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;;;ICAF,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;;;;ICfD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC;;;;;;;;ICAD;QACI,yBACU,cAAqD,EACrD,iBAA8D,EAC9D,YAAgB,EAChB,WAAmB,EACnB,QAOL,EACM,QAAa,EACd,WAAkB,EAClB,OAA2C,EAC3C,MAA2C,EAC3C,eAAmB,EACnB,OAAe,EACf,eAAuB,EACvB,QAAgB,EAChB,OAAqB,EACrB,QAAsB,EACtB,MAAU,EACV,MAAU,EAAE,cAAkB,EAAE,cAAkB,EAClD,SAAyE;YAxBzE,+BAAA,EAAA,qBAAqB,eAAe,CAAC,cAAc,EAAE;YACrD,kCAAA,EAAA,wBAAwB,kBAAkB,CAAC,iBAAiB,EAAE;YAC9D,6BAAA,EAAA,gBAAgB;YAChB,4BAAA,EAAA,mBAAmB;YACnB,yBAAA,EAAA;gBACF,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE;oBACjB,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;oBACnB,MAAM,EAAE,CAAC;oBACT,SAAS,EAAE,CAAC;oBACZ,SAAS,EAAE,CAAC;iBACf;aACJ;YACM,yBAAA,EAAA,aAAa;YACd,4BAAA,EAAA,kBAAkB;YAClB,wBAAA,EAAA,cAAc,KAAK,EAAwB;YAC3C,uBAAA,EAAA,aAAa,KAAK,EAAyB;YAC3C,gCAAA,EAAA,oBAAmB;YACnB,wBAAA,EAAA,eAAe;YACf,gCAAA,EAAA,uBAAuB;YACvB,yBAAA,EAAA,gBAAgB;YAChB,wBAAA,EAAA,cAAc,KAAK,EAAE;YACrB,yBAAA,EAAA,eAAe,KAAK,EAAE;YACtB,uBAAA,EAAA,UAAU;YACV,uBAAA,EAAA,UAAU;YAAE,+BAAA,EAAA,kBAAkB;YAAE,+BAAA,EAAA,kBAAkB;YAClD,0BAAA,EAAA,cAAc,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;YAxBzE,mBAAc,GAAd,cAAc,CAAuC;YACrD,sBAAiB,GAAjB,iBAAiB,CAA6C;YAC9D,iBAAY,GAAZ,YAAY,CAAI;YAChB,gBAAW,GAAX,WAAW,CAAQ;YACnB,aAAQ,GAAR,QAAQ,CAOb;YACM,aAAQ,GAAR,QAAQ,CAAK;YACd,gBAAW,GAAX,WAAW,CAAO;YAClB,YAAO,GAAP,OAAO,CAAoC;YAC3C,WAAM,GAAN,MAAM,CAAqC;YAC3C,oBAAe,GAAf,eAAe,CAAI;YACnB,YAAO,GAAP,OAAO,CAAQ;YACf,oBAAe,GAAf,eAAe,CAAQ;YACvB,aAAQ,GAAR,QAAQ,CAAQ;YAChB,YAAO,GAAP,OAAO,CAAc;YACrB,aAAQ,GAAR,QAAQ,CAAc;YACtB,WAAM,GAAN,MAAM,CAAI;YACV,WAAM,GAAN,MAAM,CAAI;YACV,cAAS,GAAT,SAAS,CAAgE;YAC/E,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,mBAAmB,CAAC;QAC3C,CAAC;QAED,0CAAgB,GAAhB,UAAiB,WAAW;YACzB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAC/B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC/B,CAAC;QAED,yCAAe,GAAf;YACI,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC;YAC9C,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC;YACjD,GAAG,CAAA,CAAE,IAAI,WAAW,IAAK,IAAI,CAAC,OAAO,CAAC,CACtC,CAAC;gBACM,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CACrF,CAAC;oBACG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC1D,CAAC;YACL,CAAC;YAAA,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QACpD,CAAC;QAEL,6CAAmB,GAAnB;QAEA,CAAC;QAED,yCAAe,GAAf,UAAgB,KAAK;YAEb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAEE,6CAAmB,GAAnB,UAAoB,KAAK;YACxB,IAAI,OAAO,GAAG,iCAAiC,GAAG,KAAK,CAAC,SAAS;gBACjE,kCAAkC,GAAG,KAAK,CAAC,SAAS,GAAG,OAAO;gBAC9D,mDAAmD,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;YAC7F,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;YACtD,IAAI,UAAU,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,GAAG,CAC/C,cAAc,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;gBACpC,eAAe,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,OAAO;gBAE/C,MAAM,GAAG,WAAW,GAAG,OAAO,CAAC,IAAI;gBACnC,YAAY,CAAC,CAAC;YAEd,MAAM,CAAC,iEAAiE;gBACxE,OAAO,GAAG,UAAU;gBACpB,UAAU,CAAC;QACf,CAAC;QAEC,qCAAW,GAAX,UAAY,KAAK;YAEf,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;QACA,wCAAc,GAAd,UAAe,EAAE,EAAE,EAAE;YAClB,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE,UAAU;gBAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,IAAI,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;oBAC3C,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC;QAgbL,sBAAC;IAAD,CArgBA,AAqgBC,IAAA;IArgBY,0CAAe;;;;;;;;ICD5B;QAEA,wBACW,gBAAoB,EACpB,gBAAoB,EACrB,iBAAwB,EACxB,gBAAwB,EACxB,mBAA2B,EAC3B,iBAAyB,EACzB,kBAA0B,EAC1B,qBAA6B,EAC7B,iBAAyB,EACzB,cAAsB,EACtB,YAAgB,EAChB,SAAiB,EACjB,WAAmB,EACnB,EAAM,EACN,EAAM,EACN,aAAoB,EACpB,CAA2B,EAC3B,GAAO,EACP,EAAS,EACT,EAAS,EACT,EAAM,EACN,EAAM;YArBL,iCAAA,EAAA,oBAAoB;YACpB,iCAAA,EAAA,oBAAoB;YACrB,kCAAA,EAAA,wBAAwB;YACxB,iCAAA,EAAA,wBAAwB;YACxB,oCAAA,EAAA,2BAA2B;YAC3B,kCAAA,EAAA,yBAAyB;YACzB,mCAAA,EAAA,0BAA0B;YAC1B,sCAAA,EAAA,6BAA6B;YAC7B,kCAAA,EAAA,yBAAyB;YACzB,+BAAA,EAAA,sBAAsB;YACtB,6BAAA,EAAA,gBAAgB;YAChB,0BAAA,EAAA,iBAAiB;YACjB,4BAAA,EAAA,mBAAmB;YACnB,mBAAA,EAAA,MAAM;YACN,mBAAA,EAAA,MAAM;YACN,8BAAA,EAAA,oBAAoB;YACpB,kBAAA,EAAA,QAAQ,iBAAiB,EAAE;YAC3B,oBAAA,EAAA,QAAO;YACP,mBAAA,EAAA,SAAS;YACT,mBAAA,EAAA,SAAS;YACT,mBAAA,EAAA,MAAM;YACN,mBAAA,EAAA,MAAM;YArBL,qBAAgB,GAAhB,gBAAgB,CAAI;YACpB,qBAAgB,GAAhB,gBAAgB,CAAI;YACrB,sBAAiB,GAAjB,iBAAiB,CAAO;YACxB,qBAAgB,GAAhB,gBAAgB,CAAQ;YACxB,wBAAmB,GAAnB,mBAAmB,CAAQ;YAC3B,sBAAiB,GAAjB,iBAAiB,CAAQ;YACzB,uBAAkB,GAAlB,kBAAkB,CAAQ;YAC1B,0BAAqB,GAArB,qBAAqB,CAAQ;YAC7B,sBAAiB,GAAjB,iBAAiB,CAAQ;YACzB,mBAAc,GAAd,cAAc,CAAQ;YACtB,iBAAY,GAAZ,YAAY,CAAI;YAChB,cAAS,GAAT,SAAS,CAAQ;YACjB,gBAAW,GAAX,WAAW,CAAQ;YACnB,OAAE,GAAF,EAAE,CAAI;YACN,OAAE,GAAF,EAAE,CAAI;YACN,kBAAa,GAAb,aAAa,CAAO;YACpB,MAAC,GAAD,CAAC,CAA0B;YAC3B,QAAG,GAAH,GAAG,CAAI;YACP,OAAE,GAAF,EAAE,CAAO;YACT,OAAE,GAAF,EAAE,CAAO;YACT,OAAE,GAAF,EAAE,CAAI;YACN,OAAE,GAAF,EAAE,CAAI;YAEhB,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;QACnC,CAAC;QAkdD,qBAAC;IAAD,CA9eA,AA8eC,IAAA;IA9eY,wCAAc;;;;;;;;ICA3B;QAEI,2BAAmB,QAA+C;YAA/C,yBAAA,EAAA,eAAe,KAAK,EAA2B;YAA/C,aAAQ,GAAR,QAAQ,CAAuC;QAGlE,CAAC;QACL,wBAAC;IAAD,CANA,AAMC,IAAA;IANY,8CAAiB;;;;;;;;ICH9B;QACG,cACQ,CAAI,EACJ,CAAI,EACJ,MAAU,EACV,MAAU,EACV,SAAY,EACZ,SAAa,EACb,IAAS;YANT,kBAAA,EAAA,KAAI;YACJ,kBAAA,EAAA,KAAI;YACJ,uBAAA,EAAA,UAAU;YACV,uBAAA,EAAA,UAAU;YACV,0BAAA,EAAA,aAAY;YACZ,0BAAA,EAAA,aAAa;YACb,qBAAA,EAAA,SAAS;YANT,MAAC,GAAD,CAAC,CAAG;YACJ,MAAC,GAAD,CAAC,CAAG;YACJ,WAAM,GAAN,MAAM,CAAI;YACV,WAAM,GAAN,MAAM,CAAI;YACV,cAAS,GAAT,SAAS,CAAG;YACZ,cAAS,GAAT,SAAS,CAAI;YACb,SAAI,GAAJ,IAAI,CAAK;QAGhB,CAAC;QACL,WAAC;IAAD,CAZA,AAYC,IAAA;IAZY,oBAAI;IAcjB;QACG,eACQ,CAAI,EACJ,CAAI;YADJ,kBAAA,EAAA,KAAI;YACJ,kBAAA,EAAA,KAAI;YADJ,MAAC,GAAD,CAAC,CAAG;YACJ,MAAC,GAAD,CAAC,CAAG;QAGX,CAAC;QACL,YAAC;IAAD,CAPA,AAOC,IAAA;IAPY,sBAAK;IASlB;QACG,iBACQ,IAAQ,EACR,KAAmB;YADnB,qBAAA,EAAA,SAAQ;YACR,sBAAA,EAAA,YAAY,KAAK,EAAE;YADnB,SAAI,GAAJ,IAAI,CAAI;YACR,UAAK,GAAL,KAAK,CAAc;QAG1B,CAAC;QACL,cAAC;IAAD,CAPA,AAOC,IAAA;IAPY,0BAAO;IASpB;QACG,gBACQ,IAAQ,EACR,IAAe,EACf,MAAW,EACX,EAAK;YAHL,qBAAA,EAAA,SAAQ;YACR,qBAAA,EAAA,eAAe;YACf,uBAAA,EAAA,WAAW;YACX,mBAAA,EAAA,OAAK;YAHL,SAAI,GAAJ,IAAI,CAAI;YACR,SAAI,GAAJ,IAAI,CAAW;YACf,WAAM,GAAN,MAAM,CAAK;YACX,OAAE,GAAF,EAAE,CAAG;YAER,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,CAAA;QACrB,CAAC;QACL,aAAC;IAAD,CATA,AASC,IAAA;IATY,wBAAM;IAWnB;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC","file":"app-bundle.js","sourcesContent":["export class App {\n  message = 'Hello World!';\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import iMapEditorTools = require(\"./map-editor-tools\");\r\nimport iMapEditorTriggers = require(\"./map-editor-triggers\");\r\nimport iMapEditorTypes = require(\"./map-editor-types\");\r\n\r\nexport class MapEditorCanvas {\r\n    constructor(\r\n       public mapEditorTools = new iMapEditorTools.MapEditorTools(),\r\n       public mapEditorTriggers = new iMapEditorTriggers.MapEditorTriggers(),\r\n       public currentLayer = 0,\r\n       public paletteMode = false,\r\n       public lastTile = {\r\n            layerIndex: 0, tile: {\r\n                name: '', xIndex: 0,\r\n                yIndex: 0,\r\n                xPosition: 0,\r\n                yPosition: 0,\r\n            }\r\n        },\r\n        public tileInfo = \"\",\r\n       public copiedLayer = null,\r\n       public palette = new Array<iMapEditorTypes.Tile>(),\r\n       public layers = new Array<iMapEditorTypes.Layer>(),\r\n       public renameTileValue =\"\",\r\n       public showFog = false,\r\n       public perspectiveView = false,\r\n       public xRayView = false,\r\n       public sprites = new Image(),\r\n       public sprites2 = new Image(),\r\n       public mouseX = 0,\r\n       public mouseY = 0, selectedBrushX = 0, selectedBrushY = 0,\r\n       public brushTool = { state: 0, mode: 0, xPos1: 0, yPos1: 0, xPos2: 0, yPos2: 0 }) {\r\n        this.sprites.src = './spritesheet.png';\r\n    }\r\n    \r\n    clickSelectLayer(_layerIndex) {\r\n       this.currentLayer = _layerIndex;\r\n        this.updateLayersPreview();\r\n    }\r\n\r\n    clickRenameTile() {\r\n        var _x = this.mapEditorTools.paintBrushInputX;\r\n        var _y = this.mapEditorTools.paintBrushInputY;\r\n     for( var _ptileIndex  in this.palette)\r\n     {\r\n            if (this.palette[_ptileIndex].xIndex == _x && this.palette[_ptileIndex].yIndex == _y)\r\n            {\r\n                this.palette[_ptileIndex].name = this.renameTileValue;\r\n            }\r\n        };\r\n        this.refreshTileInfo(this.palette[_ptileIndex]);\r\n    }\r\n\r\nupdateLayersPreview(){\r\n\r\n}\r\n\r\nrefreshTileInfo(_tile)\r\n    {\r\n        this.tileInfo = this.generateHTMLForTile(_tile);\r\n    }\r\n\r\n       generateHTMLForTile(_tile) {\r\n        var tileRow = \"<tr><td style='width:40px'> x: \" + _tile.xPosition +\r\n        \"</td><td style='width:40px'> y: \" + _tile.yPosition + \"</td>\" +\r\n        \"<td style='width:320px; text-align:left;'> name: \" + this.getTileName(_tile) + \"</td></tr>\";\r\n        var trigger = this.mapEditorTools.getCurrentTrigger();\r\n        var triggerRow = (trigger == undefined) ? \"\" : (\r\n        \"<tr><td> x: \" + trigger.transform.x +\r\n        \"</td><td> y: \" + trigger.transform.y + \"</td>\" +\r\n\r\n        \"<td>\" + \"Trigger: \" + trigger.name +\r\n        \"</td></tr>\");\r\n\r\n        return \"<table style='table-layout:fixed;width:400px;text-align:left;'>\" +\r\n        tileRow + triggerRow +\r\n        \"</table>\";\r\n    }\r\n\r\n      getTileName(_tile) {\r\n\r\n        return this.getPaletteName(_tile.xIndex, _tile.yIndex);\r\n    }\r\n     getPaletteName(_x, _y) {\r\n        var _result = \"\";\r\n        this.palette.forEach(function (_ptile, _tileIndex) {\r\n            if (_ptile.xIndex == _x && _ptile.yIndex == _y)\r\n                _result = _ptile.name;\r\n        });\r\n        return _result;\r\n    }\r\n\r\n    // function refreshTileInfo(tile)\r\n    // {\r\n    //     tileInfo.innerHTML = generateHTMLForTile(tile);\r\n    // }\r\n\r\n    // function clickCopyLayer() {\r\n    //     copiedLayer = currentLayer;\r\n    // }\r\n\r\n    // function clickPasteLayer() {\r\n    //     layers[currentLayer].tiles = JSON.parse(JSON.stringify(layers[copiedLayer].tiles));\r\n    //     layers[currentLayer].name = layers[copiedLayer].name;\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function clickAddLayer() {\r\n    //     layers.splice(currentLayer + 1, 0, createLayer(\"layer\" + layers.length, layers.length));\r\n    //     currentLayer = currentLayer + 1;\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function clickDeleteLayer() {\r\n    //     if (layers.length <= 1) return;\r\n    //     layers.splice(currentLayer, 1);\r\n    //     currentLayer--;\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function clickClearLayer() {\r\n    //     layers[currentLayer].tiles = [];\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function clickRenameLayer() {\r\n    //     layers[currentLayer].name = renameLayerInput.value;\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function clickReorderLayer() {\r\n    //     layers[currentLayer].order = reorderLayerInput.value;\r\n    //     updateLayersPreview();\r\n    // }\r\n\r\n    // function drawMapLoop() {\r\n    //     clear();\r\n    //     if (paletteMode) {\r\n    //         drawPalette();\r\n    //     }\r\n    //     else {\r\n    //         drawLayers();\r\n    //     }\r\n    //     if (selectedTool == 0) {\r\n    //         drawSprite(sprites, mouseX, mouseY, selectedBrushX, selectedBrushY);\r\n    //         ctx.fillStyle = \"#33aa33\";\r\n    //         ctx.fillText(\"( \" + mouseX + \", \" + mouseY + \" )\", mouseX * 16 + 20, mouseY * 16 + 20);\r\n    //     }\r\n    //     if (selectedTool == 3) {\r\n    //         if (brushTool.state == 0) {\r\n    //                         drawSprite(sprites, mouseX, mouseY, selectedBrushX, selectedBrushY);\r\n    //         }\r\n    //         else {\r\n    //             drawSprite(sprites, brushTool.xPos1, brushTool.yPos1, selectedBrushX, selectedBrushY);\r\n    //             drawSprite(sprites, mouseX, mouseY, selectedBrushX + 2, selectedBrushY + 2);\r\n    //         }\r\n    //         ctx.fillStyle = \"#33aa33\";\r\n    //         ctx.fillText(\"( \" + mouseX + \", \" + mouseY + \" )\", mouseX * 16 + 20, mouseY * 16 + 20);\r\n    //     }\r\n    //     if (selectedTool == 4) {\r\n    //         if (brushTool.state == 0) {\r\n\r\n    //             drawSprite(sprites, mouseX + 1, mouseY + 1, selectedBrushX, selectedBrushY);\r\n    //         }\r\n    //         else {\r\n    //             drawSprite(sprites, brushTool.xPos1 + 1, brushTool.yPos1 + 1, selectedBrushX, selectedBrushY);\r\n    //             drawSprite(sprites, mouseX - 1, mouseY - 1, selectedBrushX + 2, selectedBrushY + 2);\r\n    //         }\r\n    //         ctx.fillStyle = \"#33aa33\";\r\n    //         ctx.fillText(\"( \" + mouseX + \", \" + mouseY + \" )\", mouseX * 16 + 20, mouseY * 16 + 20);\r\n    //     }\r\n    // }\r\n\r\n    // function drawLayers() {\r\n    //     if (layers == null || layers[currentLayer] == null) return;\r\n    //     ctx.globalAlpha = 1;\r\n    //     layers.forEach(function (layer, index) {\r\n    //         if (layers[currentLayer].order >= layer.order) {\r\n    //             if (layers[currentLayer].order == layer.order && xRayView)\r\n    //                 ctx.globalAlpha = 0.9;\r\n    //             if (layers[currentLayer].order == layer.order && currentLayer != index && xRayView)\r\n    //                 ctx.globalAlpha = 0.4;\r\n\r\n    //             drawLayer(layer);\r\n    //             if (layers[currentLayer].order != layer.order && showFog)\r\n    //                 drawLayerFog();\r\n    //         }\r\n    //         else if (xRayView) {\r\n    //             ctx.globalAlpha = ctx.globalAlpha * 0.3;\r\n    //             drawLayer(layer);\r\n    //         }\r\n    //     });\r\n    //     ctx.globalAlpha = 1;\r\n    // }\r\n\r\n    // function drawLayer(layer) {\r\n    //     if (perspectiveView) {\r\n    //         var currentOrder = layers[currentLayer].order;\r\n    //         var offsetIndex = layer.order - currentOrder;\r\n    //         var direction = currentOrder >= layer.order;\r\n    //         var mouseXoffset = mouseX - (sx);\r\n    //         var mouseYoffset = mouseY - (sy);\r\n    //         var offX = (mouseXoffset * offsetIndex / 2) * (direction ? 1 : -1);\r\n    //         var offY = (mouseYoffset * offsetIndex / 2) * (direction ? 1 : -1);\r\n    //         drawTilesOff(layer, offX, offY);\r\n    //     }\r\n    //     else {\r\n    //         drawTiles(layer);\r\n    //     }\r\n    // }\r\n\r\n    // function drawLayerFog() {\r\n    //     ctx.fillStyle = \"rgba(0,0,0,0.2)\";\r\n    //     ctx.fillRect(0, 0, cw, ch);\r\n    // }\r\n\r\n    // function drawTiles(layer) {\r\n    //         layer.tiles.forEach(function (tile) {\r\n    //        drawSprite(sprites, tile.xPosition, tile.yPosition, tile.xIndex, tile.yIndex);\r\n    //     });\r\n    // }\r\n\r\n    // function drawTilesOff(layer, xoff, yoff) {\r\n    //         layer.tiles.forEach(function (tile) {\r\n    //         drawSpriteOff(sprites, tile.xPosition, tile.yPosition, tile.xIndex, tile.yIndex, xoff, yoff);\r\n    //     });\r\n    // }\r\n\r\n    // function drawPalette() {\r\n    //     palette.forEach(function (tile) {\r\n    //         drawSprite(sprites, tile.xPosition, tile.yPosition, tile.xIndex, tile.yIndex);\r\n    //     });\r\n    // }\r\n\r\n    // function drawSprite(spriteSheet, x, y, xindex, yindex) {\r\n    //     ctx.drawImage(spriteSheet, xindex * 16, yindex * 16, 16, 16, x * 16, y * 16, 16, 16);\r\n    // }\r\n\r\n    // function drawSpriteOff(spriteSheet, xpos, ypos, xindex, yindex, xoff, yoff) {\r\n    //     var x = Math.floor(xpos * 16 + xoff);\r\n    //     var y = Math.floor(ypos * 16 + yoff);\r\n    //     ctx.drawImage(spriteSheet, xindex * 16, yindex * 16, 16, 16, x, y, 16, 16);\r\n    // }\r\n\r\n    // function updatePaintBrushPreview() {\r\n    //     selectedBrushX = paintBrushInputX.value == \"\" ? 0 : parseInt(paintBrushInputX.value);\r\n    //     selectedBrushY = paintBrushInputY.value == \"\" ? 0 : parseInt(paintBrushInputY.value);\r\n    //     renameTileInput.placeholder = getPaletteName(selectedBrushX, selectedBrushY);\r\n    //     renameTileInput.value = \"\";\r\n    //     paintBrushPreview.style.background = \"url(\" + sprites.src + \") -\" + selectedBrushX * 16 + \"px -\" + selectedBrushY * 16 + \"px\";\r\n    // }\r\n\r\n    // function updatePaintBrushPreviewFromEyedropper(tile) {\r\n    //     paintBrushInputX.value = tile.xIndex;\r\n    //     paintBrushInputY.value = tile.yIndex;\r\n    //     updatePaintBrushPreview();\r\n    // }\r\n\r\n    // function updateLastTile(layerIndex, tile) {\r\n    //     lastTile = { layerIndex: layerIndex, tile: tile };\r\n    //     var name = getTileName(lastTile.tile);\r\n    //     if (name != null && name != undefined) {\r\n    //         renameTileInput.placeholder = name;\r\n    //         renameTileInput.value = \"\";\r\n    //     }\r\n    //     else\r\n    //     {\r\n    //         renameTileInput.placeholder = \"Name\";\r\n    //         renameTileInput.value = \"\";\r\n    //     }\r\n    //     updateLastTilePreview();\r\n    //     refreshTileInfo(tile);\r\n    // }\r\n\r\n    // function updateLayersPreview() {\r\n    //     layersPreview.innerHTML = generateHTMLForLayersPreview();\r\n    //     renameLayerInput.placeholder = layers[currentLayer].name;\r\n    //     reorderLayerInput.placeholder = layers[currentLayer].order;\r\n    //     reorderLayerInput.value = \"\";\r\n    //     renameLayerInput.value = \"\";\r\n    //     showLayersToolBar = true;\r\n    //     toggleToolBar(true, layersToolBarElement, layersToolBarButtonElement);\r\n    // }\r\n\r\n    // function brushClickHandler() {\r\n    //     resetBrushTool();\r\n    //     addTileToCurrentLayer(paintBrushInputX.value, paintBrushInputY.value, mouseX, mouseY);\r\n    // }\r\n\r\n    // function nineSliceClickHandler() {\r\n    //     brushTool.mode = 1;\r\n    //     brushTool.state = brushTool.state == 0 ? 1 : 0;\r\n\r\n    //     if (brushTool.state == 1) {\r\n    //         brushTool.xPos1 = mouseX;\r\n    //         brushTool.yPos1 = mouseY;\r\n    //     }\r\n\r\n    //     if (brushTool.state == 0) {\r\n    //         brushTool.xPos2 = mouseX;\r\n    //         brushTool.yPos2 = mouseY;\r\n    //         addSlicedTiles();\r\n    //     }\r\n    // }\r\n\r\n    // function wallSliceClickHandler() {\r\n\r\n    //     brushTool.mode = 2;\r\n    //     brushTool.state = brushTool.state == 0 ? 1 : 0;\r\n\r\n    //     if (brushTool.state == 1) {\r\n    //         brushTool.xPos1 = mouseX;\r\n    //         brushTool.yPos1 = mouseY;\r\n    //     }\r\n\r\n    //     if (brushTool.state == 0) {\r\n    //         brushTool.xPos2 = mouseX;\r\n    //         brushTool.yPos2 = mouseY;\r\n    //         addSlicedTiles();\r\n    //     }\r\n    // }\r\n\r\n    // function eraserClickHandler() {\r\n    //     resetBrushTool();\r\n    //     layers[currentLayer].tiles.forEach(function (tile, index) {\r\n    //         if (tile.xPosition == mouseX && tile.yPosition == mouseY) {\r\n    //             layers[currentLayer].tiles.splice(index, 1);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    // function updateLastTilePreview() {\r\n\r\n    //     lastTilePreview.style.background = \"url(\" + sprites.src + \") -\" + lastTile.tile.xIndex * 16 + \"px -\" + lastTile.tile.yIndex * 16 + \"px\";\r\n    // }\r\n\r\n    // function createLayer(name, order) {\r\n    //     return { name: name, order: layers.length, tiles: [] };\r\n    // }\r\n\r\n    // function addSlicedTiles() {\r\n    //     var upperBoundX = brushTool.xPos1 > brushTool.xPos2 ? brushTool.xPos1 : brushTool.xPos2;\r\n    //     var lowerBoundX = brushTool.xPos1 < brushTool.xPos2 ? brushTool.xPos1 : brushTool.xPos2;\r\n    //     var upperBoundY = brushTool.yPos1 > brushTool.yPos2 ? brushTool.yPos1 : brushTool.yPos2;\r\n    //     var lowerBoundY = brushTool.yPos1 < brushTool.yPos2 ? brushTool.yPos1 : brushTool.yPos2;\r\n\r\n    //     for (var x = lowerBoundX; x <= upperBoundX; x++) {\r\n    //         for (var y = lowerBoundY; y <= upperBoundY; y++) {\r\n    //             addSlicedTileToCurrentLayer(parseInt(paintBrushInputX.value), parseInt(paintBrushInputY.value), x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY)\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // function addSlicedTileToCurrentLayer(xIndex, yIndex, x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY) {\r\n\r\n    //     var offset;\r\n\r\n    //     if (brushTool.mode == 1)\r\n    //         offset = getIndexOffsetForNineSlicedTile(x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY);\r\n    //     else if (brushTool.mode == 2)\r\n    //         offset = getIndexOffsetForWallSlicedTile(x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY);\r\n    //     if (offset == null) return;\r\n    //     addTileToCurrentLayer(xIndex + offset[0], yIndex + offset[1], x, y);\r\n    // }\r\n\r\n    // function getIndexOffsetForWallSlicedTile(x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY) {\r\n\r\n\r\n    //     //empty corners - return null\r\n    //     if ((x == lowerBoundX && y == lowerBoundY) || (x == lowerBoundX + 1 && y == lowerBoundY) || (x == lowerBoundX && y == lowerBoundY + 1) ||\r\n    //     (x == upperBoundX && y == lowerBoundY) || (x == upperBoundX - 1 && y == lowerBoundY) || (x == upperBoundX && y == lowerBoundY + 1) ||\r\n    //     (x == lowerBoundX && y == upperBoundY) || (x == lowerBoundX && y == upperBoundY - 1) || (x == lowerBoundX + 1 && y == upperBoundY) ||\r\n    //     (x == upperBoundX && y == upperBoundY) || (x == upperBoundX - 1 && y == upperBoundY) || (x == upperBoundX && y == upperBoundY - 1)\r\n    //     ) { // upper left\r\n    //         return null;\r\n    //     }\r\n\r\n    //     //corners\r\n    //     if (x == lowerBoundX + 1 && y == lowerBoundY + 1) { // upper left\r\n    //         return [0, 0];\r\n    //     }\r\n    //     if (x == upperBoundX - 1 && y == lowerBoundY + 1) { //upper right\r\n    //         return [2, 0];\r\n    //     }\r\n    //     if (x == lowerBoundX + 1 && y == upperBoundY - 1) { //bottom left\r\n    //         return [0, 2];\r\n    //     }\r\n    //     if (x == upperBoundX - 1 && y == upperBoundY - 1) { //bottom right\r\n    //         return [2, 2];\r\n    //     }\r\n\r\n    //     //edges\r\n    //     if (x == lowerBoundX && y != lowerBoundY && y != upperBoundY) { //west\r\n    //         return [0, 1];\r\n    //     }\r\n    //     if (x == upperBoundX && y != lowerBoundY && y != upperBoundY) {//east\r\n    //         return [2, 1];\r\n    //     }\r\n    //     if (y == lowerBoundY && x != lowerBoundX && x != upperBoundX) {//north\r\n    //         return [1, 0];\r\n    //     }\r\n    //     if (y == upperBoundY && x != lowerBoundX && x != upperBoundX) {//south\r\n    //         return [1, 2];\r\n    //     }\r\n    //     //middle\r\n    //     if (x != lowerBoundX && x != upperBoundX && y != lowerBoundY && y != upperBoundY) {\r\n    //         return null;\r\n    //     }\r\n\r\n    //     return [xIndexOffset, yIndexOffset];\r\n    // }\r\n\r\n    // function getIndexOffsetForNineSlicedTile(x, y, upperBoundX, lowerBoundX, upperBoundY, lowerBoundY) {\r\n    //     var xIndexOffset, yIndexOffset;\r\n    //     //corners\r\n    //     if (x == lowerBoundX && y == lowerBoundY) { // upper left\r\n    //         xIndexOffset = 0;\r\n    //         yIndexOffset = 0;\r\n    //     }\r\n    //     if (x == upperBoundX && y == lowerBoundY) { //upper right\r\n    //         xIndexOffset = 2;\r\n    //         yIndexOffset = 0;\r\n    //     }\r\n    //     if (x == lowerBoundX && y == upperBoundY) { //bottom left\r\n    //         xIndexOffset = 0;\r\n    //         yIndexOffset = 2;\r\n    //     }\r\n    //     if (x == upperBoundX && y == upperBoundY) { //bottom right\r\n    //         xIndexOffset = 2;\r\n    //         yIndexOffset = 2;\r\n    //     }\r\n\r\n    //     //edges\r\n    //     if (x == lowerBoundX && y != lowerBoundY && y != upperBoundY) { //west\r\n    //         xIndexOffset = 0;\r\n    //         yIndexOffset = 1;\r\n    //     }\r\n    //     if (x == upperBoundX && y != lowerBoundY && y != upperBoundY) {//east\r\n    //         xIndexOffset = 2;\r\n    //         yIndexOffset = 1;\r\n    //     }\r\n    //     if (y == lowerBoundY && x != lowerBoundX && x != upperBoundX) {//north\r\n    //         xIndexOffset = 1;\r\n    //         yIndexOffset = 0;\r\n    //     }\r\n    //     if (y == upperBoundY && x != lowerBoundX && x != upperBoundX) {//south\r\n    //         xIndexOffset = 1;\r\n    //         yIndexOffset = 2;\r\n    //     }\r\n\r\n    //     //middle\r\n    //     if (x != lowerBoundX && x != upperBoundX && y != lowerBoundY && y != upperBoundY) {\r\n    //         xIndexOffset = 1;\r\n    //         yIndexOffset = 1;\r\n    //     }\r\n    //     return [xIndexOffset, yIndexOffset];\r\n    // }\r\n\r\n    // function addTileToCurrentLayer(xIndex, yIndex, xPosition, yPosition) {\r\n    //     var matched = false;\r\n    //     layers[currentLayer].tiles.forEach(function (tile) {\r\n    //         if (tile.xPosition == xPosition && tile.yPosition == yPosition) {\r\n    //             tile.xIndex = xIndex;\r\n    //             tile.yIndex = yIndex;\r\n    //             updateLastTile(currentLayer, tile);\r\n    //             matched = true;\r\n    //         }\r\n    //     });\r\n    //     if (matched) return;\r\n    //     var newTile = {\r\n    //         xIndex: xIndex,\r\n    //         yIndex: yIndex,\r\n    //         xPosition: xPosition,\r\n    //         yPosition: yPosition\r\n    //     };\r\n\r\n    //     layers[currentLayer].tiles.push(newTile);\r\n    //     updateLastTile(currentLayer, newTile);\r\n    // }\r\n\r\n    // function generateHTMLForLayersPreview() {\r\n    //     var rows = \"\";\r\n    //     layers.forEach(function (layer, index) {\r\n    //         var classes = \"button\" + (currentLayer == index ? \" selected\" : \"\");\r\n    //         rows += \"<div class='\" + classes + \"' onclick='clickSelectLayer(\" + index + \")'>\" + layer.name + \" (\" + layer.order + \") </div>\";\r\n    //     });\r\n    //     return \"<div>\" + rows + \"</div>\";\r\n    // }\r\n\r\n \r\n\r\n   \r\n\r\n    // function getTileName(tile) {\r\n\r\n    //     return getPaletteName(tile.xIndex, tile.yIndex);\r\n    // }\r\n\r\n    // function initPalette() {\r\n    //     palette = [];\r\n    //     var w = 37;\r\n    //     var h = 28;\r\n    //     for (var y = 0; y < h; y++) {\r\n    //         for (var x = 0; x < w; x++) {\r\n    //             palette.push({\r\n    //                 xIndex: x,\r\n    //                 yIndex: y,\r\n    //                 xPosition: x,\r\n    //                 yPosition: y,\r\n    //                 name: \"\"\r\n    //             });\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // function movePalette() {\r\n    //     palette.forEach(function (ptile) {\r\n    //         ptile.xPosition = ptile.xIndex + (sx <= 12 ? 0 : sx - 12);\r\n    //         ptile.yPosition = ptile.yIndex + (sy <= 12 ? 0 : sy - 12);\r\n    //     });\r\n\r\n    // }\r\n}","\r\nimport iMapEditorTypes = require(\"./map-editor-types\");\r\n\r\nexport class MapEditorTools {\r\n\r\nconstructor(  \r\n    public paintBrushInputX = 0,\r\n    public paintBrushInputY = 0,    \r\n   public showLayersToolBar = true,\r\n   public showTilesToolBar = false,\r\n   public showTriggersToolBar = false,\r\n   public showEventsToolBar = false,\r\n   public showActionsToolBar = false,\r\n   public showConditionsToolBar = false,\r\n   public showParamsToolBar = false,\r\n   public showMapToolBar = false,\r\n   public selectedTool = 0,\r\n   public mouseDown = false,\r\n   public inputLocked = false,\r\n   public sx = 0,\r\n   public sy = 0,\r\n   public currentAction = null,\r\n   public c = new HTMLCanvasElement(),\r\n   public ctx ={},\r\n   public cw = 2048,\r\n   public ch = 2048,\r\n   public mx = 0,\r\n   public my = 0)\r\n{\r\nthis.c = document.getElementsByTagName('canvas')[0];\r\n this.ctx = this.c.getContext('2d')\r\n}\r\n\r\n// var currentAction = null, viewActions = true;\r\n\r\n// function clickAddActionToSelectedEvent() {\r\n//     var event = getCurrentEvent();\r\n//     if (event == null) return;\r\n//     var name = renameActionInput.value == \"\" ? \"action \" + event.actions.length : renameActionInput.value;\r\n//     event.actions.push(createAction(name));\r\n//     currentAction = event.actions.length - 1;\r\n//     updateActionsPreview(event);\r\n// }\r\n\r\n// function clickRemoveSelectedAction() {\r\n\r\n// }\r\n\r\n// function clickRenameAction() {\r\n//     var action = getCurrentAction();\r\n//     action.name = renameActionInput.value;\r\n//     updateActionsPreview(event);\r\n// }\r\n\r\n// function updateActionsPreview(event) {\r\n//     if (currentAction == null || event == null) {\r\n//         actionsPreview.innerHTML = \"\";\r\n//         return;\r\n//     }\r\n//     var currentActionObj = getCurrentAction();\r\n//     updateParamsPreview(currentActionObj);\r\n//     viewActions = true;\r\n//     actionsPreview.innerHTML = generateHTMLForActionsPreview(event.actions);\r\n//     renameActionInput.placeholder = currentActionObj == null ? '' : currentActionObj.name;\r\n//     renameActionInput.value = \"\";\r\n// }\r\n\r\n\r\n// function getCurrentEvent() {\r\n//     var trigger = getCurrentTrigger();\r\n//     if (trigger == null) return null;\r\n//     return trigger.events[currentEvent];\r\n// }\r\n\r\n// function getCurrentAction() {\r\n//     var event = getCurrentEvent();\r\n//     if (event == null) return null;\r\n//     return event.actions[currentAction];\r\n// }\r\n\r\n// function clickSelectAction(index) {\r\n//     var event = getCurrentEvent();\r\n//     if (event == null) return;\r\n//     currentAction = index;\r\n//     updateActionsPreview(event);\r\n// }\r\n\r\n// function generateHTMLForActionsPreview(currentActions) {\r\n//     var rows = \"\";\r\n//     if (currentActions == null) return rows;\r\n//     currentActions.forEach(function (action, index) {\r\n//         var classes = \"button\" + (currentAction == index ? \" selected\" : \"\");\r\n//         rows += \"<div class='\" + classes + \"' onclick='clickSelectAction(\" + index + \")'>\" + action.name + \" </div>\";\r\n//     });\r\n//     return \"<div>\" + rows + \"</div>\";\r\n// }\r\n\r\n// function getCurrentActions() {\r\n//     var event = getCurrentEvent();\r\n//     return event.actions;\r\n// }\r\n\r\n// function clickToggleXRay() {\r\n//     xRayView = !xRayView;\r\n//     togglePaletteMode(false);\r\n// }\r\n\r\n// function clickTogglePerspective() {\r\n//     perspectiveView = !perspectiveView;\r\n//     togglePaletteMode(false);\r\n// }\r\n\r\n// function clickToggleFog() {\r\n//     showFog = !showFog;\r\n//     togglePaletteMode(false);\r\n// }\r\n\r\n// function clickOpenGameStateEditor() {\r\n//     openPopup(gameStatePopup);\r\n// }\r\n// function clickClosePopups() {\r\n//     closePopups();\r\n// }\r\n\r\n// function clickOpenPlayerStateEditor() {\r\n//     openPopup(playerStatePopup);\r\n// }\r\n\r\n// function clickPaintTool() {\r\n//     togglePaletteMode(false);\r\n//     updatePaintBrushPreview();\r\n//     selectTool(0, brushToolButton);\r\n// }\r\n\r\n// function clickEraserTool() {\r\n//     togglePaletteMode(false);\r\n//     selectTool(1, eraserToolButton);\r\n// }\r\n\r\n// function clickEyedropperTool() {\r\n//     updatePaintBrushPreview();\r\n//     selectTool(2, eyedropperToolButton);\r\n// }\r\n\r\n// function clickNineSliceTool() {\r\n//     togglePaletteMode(false);\r\n//     selectTool(3, nineSliceToolButton);\r\n// }\r\n\r\n// function clickWallSliceTool() {\r\n//     togglePaletteMode(false);\r\n//     selectTool(4, wallSliceToolButton);\r\n// }\r\n\r\n// function clickTriggerBrushTool() {\r\n//     togglePaletteMode(false);\r\n//     selectTool(5, triggerToolButton);\r\n// }\r\n\r\n// function clickPaletteButton() {\r\n//     paletteMode = !paletteMode;\r\n//     togglePaletteMode(paletteMode);\r\n// }\r\n\r\n// function clickImportMapButton() {\r\n\r\n//     if (!validateImportButton()) return;\r\n//     startRead();\r\n// }\r\n\r\n// function clickExportMapButton() {\r\n//     if (!validateExportButton()) return;\r\n//     var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(createMapObject()));\r\n//     var dlAnchorElem = document.getElementById('HiddenDownloadAnchor');\r\n//     dlAnchorElem.setAttribute(\"href\", dataStr);\r\n//     dlAnchorElem.setAttribute(\"download\", mapNameInput.value + \".json\");\r\n//     dlAnchorElem.click();\r\n// }\r\n\r\n// function clickLayersToolBarButton() {\r\n//     showLayersToolBar = !showLayersToolBar;\r\n//     toggleToolBar(showLayersToolBar, layersToolBarElement, layersToolBarButtonElement);\r\n// }\r\n\r\n// function clickMapToolBarButton() {\r\n//     showMapToolBar = !showMapToolBar;\r\n//     toggleToolBar(showMapToolBar, mapToolBarElement, mapToolBarButtonElement);\r\n// }\r\n\r\n// function clickTilesToolBarButton() {\r\n//     showTilesToolBar = !showTilesToolBar;\r\n//     toggleToolBar(showTilesToolBar, tilesToolBarElement, tilesToolBarButtonElement);\r\n// }\r\n\r\n// function clickOptionsToolBarButton() {\r\n//     showTilesToolBar = !showTilesToolBar;\r\n//     toggleToolBar(showTilesToolBar, optionsToolBarElement, optionsToolBarButtonElement);\r\n// }\r\n\r\n// function clickTriggersToolBarButton() {\r\n//     showTriggersToolBar = !showTriggersToolBar;\r\n//     toggleToolBar(showTriggersToolBar, triggersToolBarElement, triggersToolBarButtonElement);\r\n// }\r\n\r\n// function clickEventsToolBarButton() {\r\n//     showEventsToolBar = !showEventsToolBar;\r\n//     toggleToolBar(showEventsToolBar, eventsToolBarElement, eventsToolBarButtonElement);\r\n// }\r\n\r\n// function clickActionsToolBarButton() {\r\n//     showActionsToolBar = !showActionsToolBar;\r\n//     toggleToolBar(showActionsToolBar, actionsToolBarElement, actionsToolBarButtonElement);\r\n// }\r\n\r\n// function clickConditionsToolBarButton() {\r\n//     showConditionsToolBar = !showConditionsToolBar;\r\n//     toggleToolBar(showConditionsToolBar, conditionsToolBarElement, conditionsToolBarButtonElement);\r\n// }\r\n\r\n// function clickParamsToolBarButton() {\r\n//     showParamsToolBar = !showParamsToolBar;\r\n//     toggleToolBar(showParamsToolBar, paramsToolBarElement, paramsToolBarButtonElement);\r\n// }\r\n\r\n// function onFocusInput() {\r\n//     inputLocked = true;\r\n// }\r\n\r\n// function onBlurInput() {\r\n//     inputLocked = false;\r\n// }\r\n\r\n// function validateExportButton() {\r\n//     if (mapNameInput.value == null || mapNameInput.value == \"\") {\r\n//         mapNameInput.style.borderColor = 'red';\r\n//         return false;\r\n//     }\r\n//     else {\r\n//         mapNameInput.style.borderColor = '#33aa33';\r\n//         return true;\r\n//     }\r\n// }\r\n\r\n// function validateImportButton() {\r\n//     if (fileInput.value == null || fileInput.value == \"\") {\r\n//         fileInput.style.borderColor = 'red';\r\n//         return false;\r\n//     }\r\n//     else {\r\n//         fileInput.style.borderColor = '#33aa33';\r\n//         return true;\r\n//     }\r\n// }\r\n\r\n// function togglePaletteMode(on) {\r\n//     paletteMode = on;\r\n//     if (on) {\r\n//         movePalette();\r\n//         selectTool(2, eyedropperToolButton);\r\n//     }\r\n// }\r\n\r\n// function toggleContextMenu() {\r\n//     if (contextMenu.style.width != \"200px\") {\r\n//         contextMenu.style.width = \"200px\";\r\n//     }\r\n//     else {\r\n//         contextMenu.style.width = \"0px\";\r\n//     }\r\n// }\r\n\r\n// function toggleToolBar(show, toolBarElement, buttonElement) {\r\n//     buttonElement.innerHTML = show ? \" - \" : \" + \";\r\n//     toolBarElement.style.height = show ? toolBarElement.scrollHeight + \"px\" : \"34px\";\r\n// }\r\n\r\n// function resetTools() {\r\n//     toggleClass(eraserToolButton, false, \"selected\");\r\n//     toggleClass(eyedropperToolButton, false, \"selected\");\r\n//     toggleClass(wallSliceToolButton, false, \"selected\");\r\n//     toggleClass(nineSliceToolButton, false, \"selected\");\r\n//     toggleClass(triggerToolButton, false, \"selected\");\r\n//     toggleClass(brushToolButton, false, \"selected\");\r\n// }\r\n\r\n// function selectTool(toolIndex, selectedToolElement) {\r\n//     selectedTool = toolIndex;\r\n//     var cursor = \"default\";\r\n//     switch (selectedTool) {\r\n//         case 0:\r\n//             cursor = \"default\";\r\n//             break;\r\n//         case 1: case 5:\r\n//             cursor = \"crosshair\";\r\n//             break;\r\n//         case 2:\r\n//             cursor = \"help\";\r\n//             break;\r\n//         case 3:\r\n//             cursor = \"nwse-resize\";\r\n//             break;\r\n//         case 4:\r\n//             cursor = \"nwse-resize\";\r\n//             break;\r\n//     }\r\n//     ctx.canvas.style.cursor = cursor;\r\n//     resetTools();\r\n//     toggleClass(selectedToolElement, true, \"selected\");\r\n// }\r\n\r\n// function clear() {\r\n//     ctx.fillStyle = \"#222\";\r\n//     ctx.fillRect(0, 0, cw, ch);\r\n// }\r\n\r\n// function mouseUpHandler() {\r\n//     if (mouseX < 0 || mouseY < 0) return;\r\n//     mouseDown = false;\r\n// }\r\n\r\n// function mouseDownHandler() {\r\n//     if (mouseX < 0 || mouseY < 0) return;\r\n//     mouseDown = true;\r\n\r\n// }\r\n\r\n// function mouseClickHandler(e) {\r\n//     if (mouseX < 0 || mouseY < 0) return;\r\n//     if (selectedTool == 0)\r\n//         brushClickHandler();\r\n//     else if (selectedTool == 1)\r\n//         eraserClickHandler();\r\n//     else if (selectedTool == 2)\r\n//         eyedropperClick();\r\n//     else if (selectedTool == 3)\r\n//         nineSliceClickHandler();\r\n//     else if (selectedTool == 4)\r\n//         wallSliceClickHandler();\r\n//     else if (selectedTool == 5)\r\n//         triggerBrushClickHandler();\r\n//     else if (selectedTool == 6)\r\n//         eventBrushClickHandler();\r\n//     else if (selectedTool == 7)\r\n//         actionBrushClickHandler();\r\n// }\r\n\r\n// function resetBrushTool() {\r\n//     brushTool.mode = 0;\r\n//     brushTool.state = 0;\r\n// }\r\n\r\n// function eyedropperClick() {\r\n//     resetBrushTool();\r\n//     if (paletteMode) {\r\n//         palette.forEach(function (tile, index) {\r\n//             if (tile.xPosition == mouseX && tile.yPosition == mouseY) {\r\n//                 updatePaintBrushPreviewFromEyedropper(tile);\r\n//             }\r\n//         });\r\n//     }\r\n//     else {\r\n//         layers[currentLayer].tiles.forEach(function (tile, index) {\r\n//             if (tile.xPosition == mouseX && tile.yPosition == mouseY) {\r\n//                 updateLastTile(currentLayer, tile);\r\n//                 updatePaintBrushPreviewFromEyedropper(tile);\r\n//             }\r\n//         });\r\n//     }\r\n// }\r\n\r\n// function mouseMoveHandler(e) {\r\n//     if (e.button != 0) return;\r\n//     if (mouseDown && brushTool.mode == 0) mouseClickHandler();\r\n//     if (e.layerX) {\r\n//         mouseX = Math.floor((e.layerX) / 32);\r\n//         mouseY = Math.floor((e.layerY) / 32);\r\n//     }\r\n// }\r\n\r\n// function keyPressHandler(event) {\r\n//     if (inputLocked) return;\r\n//     var key = String.fromCharCode(event.keyCode || event.charCode).toUpperCase();\r\n//     var shift = event.shiftKey;\r\n//     var ctrl = event.ctrlKey;\r\n//     switch (key) {\r\n//         case 'Q':\r\n//             toggleContextMenu();\r\n//             break;\r\n//         case 'B':\r\n//             clickPaintTool();\r\n//             break;\r\n//         case 'P': \r\n//             clickPaletteButton();\r\n//             break;\r\n//         case 'X': \r\n//             clickToggleXRay();\r\n//             break;\r\n//         case 'F': \r\n//             clickToggleFog();\r\n//             break;\r\n//         case 'Z':\r\n//             clickTogglePerspective();\r\n//             break;\r\n//         case 'E': \r\n//             clickEraserTool();\r\n//             break;\r\n//         case 'I': \r\n//             clickEyedropperTool();\r\n//             break;\r\n//         case 'W': \r\n//             clickWallSliceTool();\r\n//             break;\r\n//         case 'N': \r\n//             clickNineSliceTool();\r\n//             break;\r\n//         case 'T':\r\n//             clickTriggerBrushTool();\r\n//             break;\r\n//         case 'S':\r\n//             clickSubtileTool();\r\n//             break;\r\n          \r\n//     }\r\n// }\r\n\r\n// function createMapObject() {\r\n//     return {\r\n//         name: mapNameInput.value,\r\n//         layers: layers,\r\n//         palette: palette,\r\n//         triggers: triggers,\r\n//         gameState: gameState,\r\n//         playerState:playerState\r\n//     }\r\n// }\r\n\r\n// function startRead() {\r\n//     var file = fileInput.files[0];\r\n//     if (file) {\r\n//         getAsText(file);\r\n//     }\r\n// }\r\n\r\n// function getAsText(readFile) {\r\n//     var reader = new FileReader();\r\n//     reader.readAsText(readFile, \"UTF-8\");\r\n//     reader.onprogress = updateProgress;\r\n//     reader.onload = loaded;\r\n//     reader.onerror = errorHandler;\r\n// }\r\n\r\n// function updateProgress(evt) {\r\n//     if (evt.lengthComputable) {\r\n//         var loaded = (evt.loaded / evt.total);\r\n//         if (loaded < 1) {\r\n//         }\r\n//     }\r\n// }\r\n\r\n// function loaded(evt) {\r\n//     var fileString = evt.target.result;\r\n//     var map = JSON.parse(fileString);\r\n//     layers = map.layers;\r\n//     palette = map.palette;\r\n//     triggers = map.triggers;\r\n//     playerState = map.playerState;\r\n//     gameState = map.gameState;\r\n//     mapNameInput.placeholder = map.name;\r\n//     mapNameInput.value = \"\";\r\n//     updateLayersPreview();\r\n// }\r\n\r\n// function errorHandler(evt) {\r\n//     alert(\"Error reading file. \" + evt.target.error.name);\r\n    \r\n// }\r\n\r\n// function genID() {\r\n//     Math.random().toString(36).substr(2, 9);\r\n// }\r\n\r\n// function toggleClass(element, on, className) {\r\n//     if (on) element.classList.add(className);\r\n//     else element.classList.remove(className);\r\n// }\r\n\r\n// var addEvent = function (object, type, callback) {\r\n//     if (object == null || typeof (object) == 'undefined') return;\r\n//     if (object.addEventListener) {\r\n//         object.addEventListener(type, callback, false);\r\n//     } else if (object.attachEvent) {\r\n//         object.attachEvent(\"on\" + type, callback);\r\n//     } else {\r\n//         object[\"on\" + type] = callback;\r\n//     }\r\n// };\r\n\r\n}","import iMapEditorTypes = require(\"./map-editor-types\");\r\n\r\n\r\nexport class MapEditorTriggers\r\n{\r\n    constructor(public triggers = new Array<iMapEditorTypes.Trigger>())\r\n    {\r\n\r\n    }\r\n}\r\n\r\n// var triggers = [];\r\n// var currentTrigger = 0;\r\n// var viewTriggers = true;\r\n\r\n// function drawTriggersLoop() {\r\n//     if (!viewTriggers) return;\r\n//     if (selectedTool == 5) {\r\n//         if (brushTool.state == 1)\r\n//         {\r\n//             var upperBoundX = brushTool.xPos1 > mouseX ? brushTool.xPos1 : mouseX;\r\n//             var lowerBoundX = brushTool.xPos1 < mouseX ? brushTool.xPos1 : mouseX;\r\n//             var upperBoundY = brushTool.yPos1 > mouseY ? brushTool.yPos1 : mouseY;\r\n//             var lowerBoundY = brushTool.yPos1 < mouseY ? brushTool.yPos1 : mouseY;\r\n//             var fakeTrigger = {\r\n//                 name: \"\",\r\n//                 layer: currentLayer,\r\n//                 transform: { x: lowerBoundX, y: lowerBoundY, width: 1+upperBoundX - lowerBoundX, height: 1+upperBoundY - lowerBoundY }\r\n//             }\r\n\r\n//             drawTrigger(fakeTrigger, false, 0, 0, layers[currentLayer], false);\r\n//         }\r\n//         else {\r\n//             var fakeTrigger = {\r\n//                 name: \"\",\r\n//                 layer: currentLayer,\r\n//                 transform: { x: mouseX, y: mouseY, width: 1, height:1 }\r\n//             }\r\n\r\n//             drawTrigger(fakeTrigger, false, 0, 0, layers[currentLayer], false);\r\n//         }\r\n\r\n//     }\r\n//     triggers.forEach(function (trigger,index) {\r\n//         drawTriggerWithOffset(trigger, index == currentTrigger);\r\n//     });\r\n// }\r\n\r\n// function drawTrigger(trigger, selected, offx, offy, thisLayerObj, error) {\r\n//     var thisLayer = currentLayer == trigger.layer;\r\n//     var label = trigger.name + (error?\"Missing Layer\" :(!thisLayer ? \" \" + thisLayerObj.name : \"\"));\r\n//     var x = (trigger.transform.x * 16) + offx,\r\n//         y = (trigger.transform.y * 16) + offy,\r\n//         width = trigger.transform.width * 16,\r\n//         height = trigger.transform.height * 16;\r\n\r\n//     var transparentColor = error ? \"rgba(255,0,0,0.1)\" : selected ?\r\n//         (!thisLayer ? \"rgba(255,255,255,0.05)\" : \"rgba(255,255,255,0.5)\")\r\n//         : thisLayer ? \"rgba(0,200,0,0.5)\"\r\n//         : \"rgba(0,200,0,0.05)\";\r\n\r\n//     var solidColor = selected ? \"rgb(255,255,255)\" : !thisLayer ? \"rgba(0,200,0,0.1)\" : \"rgb(0,200,0)\";\r\n//     ctx.fillStyle = transparentColor;\r\n//     ctx.fillRect(x, y, width, height);\r\n//     ctx.strokeStyle = solidColor;\r\n//     ctx.strokeRect(x, y, width, height);\r\n//     ctx.fillStyle = !thisLayer ? \"rgba(0,0,0,0.1)\" : '#000';\r\n//     ctx.fillText(trigger.name, x, y + height + 16);\r\n//     ctx.fillStyle = solidColor;\r\n//     ctx.fillText(label, x + 1, y + height + 15);\r\n// }\r\n\r\n// function drawTriggerWithOffset(trigger, selected) {\r\n//     var thisLayerObj = layers[trigger.layer];\r\n//     var error = thisLayerObj == null;\r\n//     if (perspectiveView) {\r\n//         var order = thisLayerObj != null ? thisLayerObj.order:0;\r\n//         var currentOrder = layers[currentLayer].order;\r\n//         var offsetIndex = order - currentOrder;\r\n//         var direction = currentOrder >= order;\r\n//         var mouseXoffset = mouseX - (sx);\r\n//         var mouseYoffset = mouseY - (sy);\r\n//         var offX = (mouseXoffset * offsetIndex / 2) * (direction ? 1 : -1);\r\n//         var offY = (mouseYoffset * offsetIndex / 2) * (direction ? 1 : -1);\r\n//         drawTrigger(trigger, selected, offX, offY, thisLayerObj, error);\r\n//     }\r\n//     else {\r\n//         drawTrigger(trigger, selected, 0, 0, thisLayerObj, error);\r\n//     }\r\n// }\r\n\r\n// function generateHTMLForTriggersPreview() {\r\n//     var rows = \"\";\r\n//     triggers.forEach(function (trigger, index) {\r\n//         var classes = \"button\" + (currentTrigger == index ? \" selected\" : \"\");\r\n//         rows += \"<div class='\" + classes + \"' onclick='clickSelectTrigger(\" + index + \")'>\" + trigger.name + \" </div>\";\r\n//     });\r\n//     return \"<div>\" + rows + \"</div>\";\r\n// }\r\n\r\n// function clickSelectTrigger(index) {\r\n//     currentTrigger = index;\r\n//     updateTriggersPreview();\r\n  \r\n// }\r\n\r\n// function clickRenameTrigger() {\r\n//     triggers[currentTrigger].name = renameTriggerInput.value;\r\n//     updateTriggersPreview();\r\n// }\r\n\r\n// function updateTriggersPreview() {\r\n//     if (currentTrigger == null) return;\r\n//     var trigger = getCurrentTrigger();\r\n//     updateEventsPreview(trigger);\r\n//     viewTriggers = true;\r\n//     refreshTileInfo(lastTile.tile);\r\n//     triggersPreview.innerHTML = generateHTMLForTriggersPreview();\r\n//     renameTriggerInput.placeholder = triggers[currentTrigger].name;\r\n//     renameTriggerInput.value = \"\";\r\n//     showTriggersToolBar = true;\r\n//     toggleToolBar(true, triggersToolBarElement, triggersToolBarButtonElement);\r\n// }\r\n\r\n// function clickCreateTriggerArea() {\r\n//     var upperBoundX = brushTool.xPos1 > brushTool.xPos2 ? brushTool.xPos1 : brushTool.xPos2;\r\n//     var lowerBoundX = brushTool.xPos1 < brushTool.xPos2 ? brushTool.xPos1 : brushTool.xPos2;\r\n//     var upperBoundY = brushTool.yPos1 > brushTool.yPos2 ? brushTool.yPos1 : brushTool.yPos2;\r\n//     var lowerBoundY = brushTool.yPos1 < brushTool.yPos2 ? brushTool.yPos1 : brushTool.yPos2;\r\n//     triggers.push(createTrigger(\r\n//         \"area trigger \" + triggers.length,\r\n//         { x: lowerBoundX, y: lowerBoundY, width: (upperBoundX - lowerBoundX) + 1, height: (upperBoundY - lowerBoundY) + 1, }));\r\n//     currentTrigger = triggers.length - 1;\r\n//     updateTriggersPreview();\r\n// }\r\n\r\n\r\n// function triggerBrushClickHandler() {\r\n//     brushTool.mode = 3;\r\n//     brushTool.state = brushTool.state == 0 ? 1 : 0;\r\n\r\n//     if (brushTool.state == 1) {\r\n//         brushTool.xPos1 = mouseX;\r\n//         brushTool.yPos1 = mouseY;\r\n//     }\r\n\r\n//     if (brushTool.state == 0) {\r\n//         brushTool.xPos2 = mouseX;\r\n//         brushTool.yPos2 = mouseY;\r\n//         clickCreateTriggerArea();\r\n//     }\r\n// }\r\n\r\n// function clickRemoveSelectedTrigger() {\r\n//     if (triggers.length == 0) return;\r\n//     triggers.splice(currentTrigger, 1);\r\n//     currentTrigger--;\r\n//     updateTriggersPreview();\r\n// }\r\n\r\n// function clickToggleTiggerViewMode() {\r\n//     viewTriggers = !viewTriggers;\r\n// }\r\n\r\n// function createTrigger(name, transform) {\r\n//     return {\r\n//         id: \"trigger\",\r\n//         events: [],\r\n//         name: name,\r\n//         layer:currentLayer,\r\n//         transform: transform\r\n//     };\r\n// }","export class Tile{\r\n   constructor(\r\n    public x =0,\r\n    public y =0,\r\n    public xIndex = 0,\r\n    public yIndex = 0,\r\n    public yPosition =0,\r\n    public xPosition = 0,\r\n    public name = \"\")\r\n    {\r\n\r\n    }\r\n}\r\n\r\nexport class Layer{\r\n   constructor(\r\n    public x =0,\r\n    public y =0)\r\n    {\r\n\r\n    }\r\n}\r\n\r\nexport class Trigger{\r\n   constructor(\r\n    public name= \"\",\r\n    public layer = new Layer())\r\n    {\r\n\r\n    }\r\n}\r\n\r\nexport class Action{\r\n   constructor(\r\n    public name= \"\",\r\n    public type = \"Action\",\r\n    public params = [],\r\n    public id=\"\")\r\n    {\r\n        this.id = genId()\r\n    }\r\n}\r\n\r\nfunction genId(){\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n"],"sourceRoot":".."}