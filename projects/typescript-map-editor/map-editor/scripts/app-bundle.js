define('app',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var App = (function () {
        function App() {
            this.message = 'Hello World!';
        }
        return App;
    }());
    exports.App = App;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQTtRQUFBO1lBQ0UsWUFBTyxHQUFHLGNBQWMsQ0FBQztRQUMzQixDQUFDO1FBQUQsVUFBQztJQUFELENBRkEsQUFFQyxJQUFBO0lBRlksa0JBQUciLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEFwcCB7XG4gIG1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbn1cbiJdLCJzb3VyY2VSb290Ijoic3JjIn0=

define('environment',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        debug: true,
        testing: true
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBLGtCQUFlO1FBQ2IsS0FBSyxFQUFFLElBQUk7UUFDWCxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUMiLCJmaWxlIjoiZW52aXJvbm1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGRlYnVnOiB0cnVlLFxuICB0ZXN0aW5nOiB0cnVlXG59O1xuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==

define('main',["require", "exports", "./environment"], function (require, exports, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(aurelia) {
        aurelia.use
            .standardConfiguration()
            .feature('resources');
        if (environment_1.default.debug) {
            aurelia.use.developmentLogging();
        }
        if (environment_1.default.testing) {
            aurelia.use.plugin('aurelia-testing');
        }
        aurelia.start().then(function () { return aurelia.setRoot(); });
    }
    exports.configure = configure;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBR0EsbUJBQTBCLE9BQWdCO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHO2FBQ1IscUJBQXFCLEVBQUU7YUFDdkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXhCLEVBQUUsQ0FBQyxDQUFDLHFCQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbkMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFFRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBZEQsOEJBY0MiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXVyZWxpYX0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmUoYXVyZWxpYTogQXVyZWxpYSkge1xuICBhdXJlbGlhLnVzZVxuICAgIC5zdGFuZGFyZENvbmZpZ3VyYXRpb24oKVxuICAgIC5mZWF0dXJlKCdyZXNvdXJjZXMnKTtcblxuICBpZiAoZW52aXJvbm1lbnQuZGVidWcpIHtcbiAgICBhdXJlbGlhLnVzZS5kZXZlbG9wbWVudExvZ2dpbmcoKTtcbiAgfVxuXG4gIGlmIChlbnZpcm9ubWVudC50ZXN0aW5nKSB7XG4gICAgYXVyZWxpYS51c2UucGx1Z2luKCdhdXJlbGlhLXRlc3RpbmcnKTtcbiAgfVxuXG4gIGF1cmVsaWEuc3RhcnQoKS50aGVuKCgpID0+IGF1cmVsaWEuc2V0Um9vdCgpKTtcbn1cbiJdLCJzb3VyY2VSb290Ijoic3JjIn0=

define('resources/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
    }
    exports.configure = configure;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc291cmNlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQSxtQkFBMEIsTUFBOEI7SUFFeEQsQ0FBQztJQUZELDhCQUVDIiwiZmlsZSI6InJlc291cmNlcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RnJhbWV3b3JrQ29uZmlndXJhdGlvbn0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvbikge1xuICAvL2NvbmZpZy5nbG9iYWxSZXNvdXJjZXMoW10pO1xufVxuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==

define('map-editor-canvas',["require", "exports", "./map-editor-tools", "./map-editor-triggers"], function (require, exports, iMapEditorTools, iMapEditorTriggers) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MapEditorCanvas = (function () {
        function MapEditorCanvas(mapEditorTools, mapEditorTriggers, currentLayer, paletteMode, lastTile, tileInfo, copiedLayer, palette, layers, renameTileValue, showFog, perspectiveView, xRayView, sprites, sprites2, mouseX, mouseY, selectedBrushX, selectedBrushY, brushTool) {
            if (mapEditorTools === void 0) { mapEditorTools = new iMapEditorTools.MapEditorTools(); }
            if (mapEditorTriggers === void 0) { mapEditorTriggers = new iMapEditorTriggers.MapEditorTriggers(); }
            if (currentLayer === void 0) { currentLayer = 0; }
            if (paletteMode === void 0) { paletteMode = false; }
            if (lastTile === void 0) { lastTile = {
                layerIndex: 0, tile: {
                    name: '', xIndex: 0,
                    yIndex: 0,
                    xPosition: 0,
                    yPosition: 0,
                }
            }; }
            if (tileInfo === void 0) { tileInfo = ""; }
            if (copiedLayer === void 0) { copiedLayer = null; }
            if (palette === void 0) { palette = new Array(); }
            if (layers === void 0) { layers = new Array(); }
            if (renameTileValue === void 0) { renameTileValue = ""; }
            if (showFog === void 0) { showFog = false; }
            if (perspectiveView === void 0) { perspectiveView = false; }
            if (xRayView === void 0) { xRayView = false; }
            if (sprites === void 0) { sprites = new Image(); }
            if (sprites2 === void 0) { sprites2 = new Image(); }
            if (mouseX === void 0) { mouseX = 0; }
            if (mouseY === void 0) { mouseY = 0; }
            if (selectedBrushX === void 0) { selectedBrushX = 0; }
            if (selectedBrushY === void 0) { selectedBrushY = 0; }
            if (brushTool === void 0) { brushTool = { state: 0, mode: 0, xPos1: 0, yPos1: 0, xPos2: 0, yPos2: 0 }; }
            this.mapEditorTools = mapEditorTools;
            this.mapEditorTriggers = mapEditorTriggers;
            this.currentLayer = currentLayer;
            this.paletteMode = paletteMode;
            this.lastTile = lastTile;
            this.tileInfo = tileInfo;
            this.copiedLayer = copiedLayer;
            this.palette = palette;
            this.layers = layers;
            this.renameTileValue = renameTileValue;
            this.showFog = showFog;
            this.perspectiveView = perspectiveView;
            this.xRayView = xRayView;
            this.sprites = sprites;
            this.sprites2 = sprites2;
            this.mouseX = mouseX;
            this.mouseY = mouseY;
            this.brushTool = brushTool;
            this.sprites.src = './spritesheet.png';
        }
        MapEditorCanvas.prototype.clickSelectLayer = function (_layerIndex) {
            this.currentLayer = _layerIndex;
            this.updateLayersPreview();
        };
        MapEditorCanvas.prototype.clickRenameTile = function () {
            var _x = this.mapEditorTools.paintBrushInputX;
            var _y = this.mapEditorTools.paintBrushInputY;
            for (var _ptileIndex in this.palette) {
                if (this.palette[_ptileIndex].xIndex == _x && this.palette[_ptileIndex].yIndex == _y) {
                    this.palette[_ptileIndex].name = this.renameTileValue;
                }
            }
            ;
            this.refreshTileInfo(this.palette[_ptileIndex]);
        };
        MapEditorCanvas.prototype.updateLayersPreview = function () {
        };
        MapEditorCanvas.prototype.refreshTileInfo = function (_tile) {
            this.tileInfo = this.generateHTMLForTile(_tile);
        };
        MapEditorCanvas.prototype.generateHTMLForTile = function (_tile) {
            var tileRow = "<tr><td style='width:40px'> x: " + _tile.xPosition +
                "</td><td style='width:40px'> y: " + _tile.yPosition + "</td>" +
                "<td style='width:320px; text-align:left;'> name: " + this.getTileName(_tile) + "</td></tr>";
            var trigger = this.mapEditorTools.getCurrentTrigger();
            var triggerRow = (trigger == undefined) ? "" : ("<tr><td> x: " + trigger.transform.x +
                "</td><td> y: " + trigger.transform.y + "</td>" +
                "<td>" + "Trigger: " + trigger.name +
                "</td></tr>");
            return "<table style='table-layout:fixed;width:400px;text-align:left;'>" +
                tileRow + triggerRow +
                "</table>";
        };
        MapEditorCanvas.prototype.getTileName = function (_tile) {
            return this.getPaletteName(_tile.xIndex, _tile.yIndex);
        };
        MapEditorCanvas.prototype.getPaletteName = function (_x, _y) {
            var _result = "";
            this.palette.forEach(function (_ptile, _tileIndex) {
                if (_ptile.xIndex == _x && _ptile.yIndex == _y)
                    _result = _ptile.name;
            });
            return _result;
        };
        return MapEditorCanvas;
    }());
    exports.MapEditorCanvas = MapEditorCanvas;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

define('map-editor-tools',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MapEditorTools = (function () {
        function MapEditorTools(paintBrushInputX, paintBrushInputY, showLayersToolBar, showTilesToolBar, showTriggersToolBar, showEventsToolBar, showActionsToolBar, showConditionsToolBar, showParamsToolBar, showMapToolBar, selectedTool, mouseDown, inputLocked, sx, sy, currentAction, c, ctx, cw, ch, mx, my) {
            if (paintBrushInputX === void 0) { paintBrushInputX = 0; }
            if (paintBrushInputY === void 0) { paintBrushInputY = 0; }
            if (showLayersToolBar === void 0) { showLayersToolBar = true; }
            if (showTilesToolBar === void 0) { showTilesToolBar = false; }
            if (showTriggersToolBar === void 0) { showTriggersToolBar = false; }
            if (showEventsToolBar === void 0) { showEventsToolBar = false; }
            if (showActionsToolBar === void 0) { showActionsToolBar = false; }
            if (showConditionsToolBar === void 0) { showConditionsToolBar = false; }
            if (showParamsToolBar === void 0) { showParamsToolBar = false; }
            if (showMapToolBar === void 0) { showMapToolBar = false; }
            if (selectedTool === void 0) { selectedTool = 0; }
            if (mouseDown === void 0) { mouseDown = false; }
            if (inputLocked === void 0) { inputLocked = false; }
            if (sx === void 0) { sx = 0; }
            if (sy === void 0) { sy = 0; }
            if (currentAction === void 0) { currentAction = null; }
            if (c === void 0) { c = new HTMLCanvasElement(); }
            if (ctx === void 0) { ctx = {}; }
            if (cw === void 0) { cw = 2048; }
            if (ch === void 0) { ch = 2048; }
            if (mx === void 0) { mx = 0; }
            if (my === void 0) { my = 0; }
            this.paintBrushInputX = paintBrushInputX;
            this.paintBrushInputY = paintBrushInputY;
            this.showLayersToolBar = showLayersToolBar;
            this.showTilesToolBar = showTilesToolBar;
            this.showTriggersToolBar = showTriggersToolBar;
            this.showEventsToolBar = showEventsToolBar;
            this.showActionsToolBar = showActionsToolBar;
            this.showConditionsToolBar = showConditionsToolBar;
            this.showParamsToolBar = showParamsToolBar;
            this.showMapToolBar = showMapToolBar;
            this.selectedTool = selectedTool;
            this.mouseDown = mouseDown;
            this.inputLocked = inputLocked;
            this.sx = sx;
            this.sy = sy;
            this.currentAction = currentAction;
            this.c = c;
            this.ctx = ctx;
            this.cw = cw;
            this.ch = ch;
            this.mx = mx;
            this.my = my;
            this.c = document.getElementsByTagName('canvas')[0];
            this.ctx = this.c.getContext('2d');
        }
        return MapEditorTools;
    }());
    exports.MapEditorTools = MapEditorTools;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

define('map-editor-triggers',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MapEditorTriggers = (function () {
        function MapEditorTriggers(triggers) {
            if (triggers === void 0) { triggers = new Array(); }
            this.triggers = triggers;
        }
        return MapEditorTriggers;
    }());
    exports.MapEditorTriggers = MapEditorTriggers;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

define('map-editor-types',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Tile = (function () {
        function Tile(x, y, xIndex, yIndex, yPosition, xPosition, name) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (xIndex === void 0) { xIndex = 0; }
            if (yIndex === void 0) { yIndex = 0; }
            if (yPosition === void 0) { yPosition = 0; }
            if (xPosition === void 0) { xPosition = 0; }
            if (name === void 0) { name = ""; }
            this.x = x;
            this.y = y;
            this.xIndex = xIndex;
            this.yIndex = yIndex;
            this.yPosition = yPosition;
            this.xPosition = xPosition;
            this.name = name;
        }
        return Tile;
    }());
    exports.Tile = Tile;
    var Layer = (function () {
        function Layer(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            this.x = x;
            this.y = y;
        }
        return Layer;
    }());
    exports.Layer = Layer;
    var Trigger = (function () {
        function Trigger(name, layer) {
            if (name === void 0) { name = ""; }
            if (layer === void 0) { layer = new Layer(); }
            this.name = name;
            this.layer = layer;
        }
        return Trigger;
    }());
    exports.Trigger = Trigger;
    var Action = (function () {
        function Action(name, type, params, id) {
            if (name === void 0) { name = ""; }
            if (type === void 0) { type = "Action"; }
            if (params === void 0) { params = []; }
            if (id === void 0) { id = ""; }
            this.name = name;
            this.type = type;
            this.params = params;
            this.id = id;
            this.id = genId();
        }
        return Action;
    }());
    exports.Action = Action;
    function genId() {
        return Math.random().toString(36).substr(2, 9);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcC1lZGl0b3ItdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQUE7UUFDRyxjQUNRLENBQUksRUFDSixDQUFJLEVBQ0osTUFBVSxFQUNWLE1BQVUsRUFDVixTQUFZLEVBQ1osU0FBYSxFQUNiLElBQVM7WUFOVCxrQkFBQSxFQUFBLEtBQUk7WUFDSixrQkFBQSxFQUFBLEtBQUk7WUFDSix1QkFBQSxFQUFBLFVBQVU7WUFDVix1QkFBQSxFQUFBLFVBQVU7WUFDViwwQkFBQSxFQUFBLGFBQVk7WUFDWiwwQkFBQSxFQUFBLGFBQWE7WUFDYixxQkFBQSxFQUFBLFNBQVM7WUFOVCxNQUFDLEdBQUQsQ0FBQyxDQUFHO1lBQ0osTUFBQyxHQUFELENBQUMsQ0FBRztZQUNKLFdBQU0sR0FBTixNQUFNLENBQUk7WUFDVixXQUFNLEdBQU4sTUFBTSxDQUFJO1lBQ1YsY0FBUyxHQUFULFNBQVMsQ0FBRztZQUNaLGNBQVMsR0FBVCxTQUFTLENBQUk7WUFDYixTQUFJLEdBQUosSUFBSSxDQUFLO1FBR2hCLENBQUM7UUFDTCxXQUFDO0lBQUQsQ0FaQSxBQVlDLElBQUE7SUFaWSxvQkFBSTtJQWNqQjtRQUNHLGVBQ1EsQ0FBSSxFQUNKLENBQUk7WUFESixrQkFBQSxFQUFBLEtBQUk7WUFDSixrQkFBQSxFQUFBLEtBQUk7WUFESixNQUFDLEdBQUQsQ0FBQyxDQUFHO1lBQ0osTUFBQyxHQUFELENBQUMsQ0FBRztRQUdYLENBQUM7UUFDTCxZQUFDO0lBQUQsQ0FQQSxBQU9DLElBQUE7SUFQWSxzQkFBSztJQVNsQjtRQUNHLGlCQUNRLElBQVEsRUFDUixLQUFtQjtZQURuQixxQkFBQSxFQUFBLFNBQVE7WUFDUixzQkFBQSxFQUFBLFlBQVksS0FBSyxFQUFFO1lBRG5CLFNBQUksR0FBSixJQUFJLENBQUk7WUFDUixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBRzFCLENBQUM7UUFDTCxjQUFDO0lBQUQsQ0FQQSxBQU9DLElBQUE7SUFQWSwwQkFBTztJQVNwQjtRQUNHLGdCQUNRLElBQVEsRUFDUixJQUFlLEVBQ2YsTUFBVyxFQUNYLEVBQUs7WUFITCxxQkFBQSxFQUFBLFNBQVE7WUFDUixxQkFBQSxFQUFBLGVBQWU7WUFDZix1QkFBQSxFQUFBLFdBQVc7WUFDWCxtQkFBQSxFQUFBLE9BQUs7WUFITCxTQUFJLEdBQUosSUFBSSxDQUFJO1lBQ1IsU0FBSSxHQUFKLElBQUksQ0FBVztZQUNmLFdBQU0sR0FBTixNQUFNLENBQUs7WUFDWCxPQUFFLEdBQUYsRUFBRSxDQUFHO1lBRVIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQTtRQUNyQixDQUFDO1FBQ0wsYUFBQztJQUFELENBVEEsQUFTQyxJQUFBO0lBVFksd0JBQU07SUFXbkI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMiLCJmaWxlIjoibWFwLWVkaXRvci10eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUaWxle1xyXG4gICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB4ID0wLFxyXG4gICAgcHVibGljIHkgPTAsXHJcbiAgICBwdWJsaWMgeEluZGV4ID0gMCxcclxuICAgIHB1YmxpYyB5SW5kZXggPSAwLFxyXG4gICAgcHVibGljIHlQb3NpdGlvbiA9MCxcclxuICAgIHB1YmxpYyB4UG9zaXRpb24gPSAwLFxyXG4gICAgcHVibGljIG5hbWUgPSBcIlwiKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExheWVye1xyXG4gICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB4ID0wLFxyXG4gICAgcHVibGljIHkgPTApXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJpZ2dlcntcclxuICAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgbmFtZT0gXCJcIixcclxuICAgIHB1YmxpYyBsYXllciA9IG5ldyBMYXllcigpKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFjdGlvbntcclxuICAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgbmFtZT0gXCJcIixcclxuICAgIHB1YmxpYyB0eXBlID0gXCJBY3Rpb25cIixcclxuICAgIHB1YmxpYyBwYXJhbXMgPSBbXSxcclxuICAgIHB1YmxpYyBpZD1cIlwiKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaWQgPSBnZW5JZCgpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbklkKCl7XHJcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6InNyYyJ9

define('text!app.html', ['module'], function(module) { module.exports = "<template><canvas id=\"MapEditorCanvas\"></canvas></template>"; });
define('text!map-editor-canvas.html', ['module'], function(module) { module.exports = ""; });
define('text!map-editor-tools.html', ['module'], function(module) { module.exports = ""; });
define('text!map-editor-triggers.html', ['module'], function(module) { module.exports = ""; });
//# sourceMappingURL=app-bundle.js.map